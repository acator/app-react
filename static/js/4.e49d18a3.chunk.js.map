{"version":3,"sources":["components/HOC/withAuthRedirect.js","components/profile/published_post/publishedPost.jsx","components/profile/profileStatusWithHoock.jsx","components/profile/profileInfoForm.jsx","components/profile/profile_component.jsx","components/profile/profileConteiner.jsx"],"names":["dialogsMapForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","PublishedPost","className","alt","src","message","like","dislike","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","type","ProfileReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","placeholder","Object","keys","profile","contacts","map","key","error","maxValue10","maxLength","Contacts","contactTitle","contactValue","ProfileInfo","isOur","onClick","goEditMode","swa2","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","CreateFormPost","TextArea","validate","validateText","Profile","createPostDAte","postDate","post","photos","large","userPhoto","target","files","length","savePhoto","swa","id","initialValues","formData","saveProfile","then","swa3","swa4","addPost","postText","ProfileAPIContainer","componentDidMount","refresh","componentDidUpdate","match","params","userId","getStatus","getProfile","event","document","querySelector","style","visibility","opacity","transition","ComposeProfile","compose","newPost","postPage","newPostText","setUserProfile","withRouter"],"mappings":"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","file":"static/js/4.e49d18a3.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nlet dialogsMapForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n export const withAuthRedirect  = (Component) => {\n    class RedirectComponent extends React.Component{\n        render(){\n            if (this.props.isAuth === false) return <Redirect to={\"/login\"} />\n\n            return <Component {...this.props} />\n        }\n    }\n     let HeightOrderComponent = connect(dialogsMapForRedirect)(RedirectComponent)\n\n     return HeightOrderComponent\n}\n","\nimport React from 'react';\nconst PublishedPost = (props) => {\n    return(\n        <div className=\"publ_posts\">\n        <div className=\"user_photo\"><img alt=\"users\" src=\"http://chundra.ru/uploads/posts/2009-07/sean-crane-46.jpg\"/></div>\n        <div className=\"block_post\">\n          <div className =\"user_name\">Олег Олегович</div>\n          <hr/>\n          <div className=\"user_text\">{props.message}</div>\n          <div className = \"box_like_dis\">\n        <div className=\"like\">Like {props.like}</div>\n        <div className = \"dislike\">DisLike {props.dislike}</div> \n        </div> \n        </div>\n       \n      </div>\n    )\n}\nexport default PublishedPost;","import React  from 'react'\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\n\nconst ProfileStatusWithHook  = (props) => {\n    let  [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n    useEffect(() =>{\n        setStatus(props.status)\n    }, [props.status])\n  \n    const activeEditMode = ( ) => {\n        setEditMode(true)\n    }\n    const diActiveEditMode = () =>{\n        setEditMode(false)\n        props.updateStatus(status)\n\n    }\n     const changeStatus = (e) => {\n     \n            setStatus (e.currentTarget.value)\n      \n\n    }\n\n\n      return   <>\n          {!editMode &&\n              <div><span onDoubleClick = {activeEditMode} >{props.status  !== \"\"||null ? props.status :\"Введите новый статус\"}</span></div>\n         }\n          {editMode &&\n        <div>\n              <input onChange={changeStatus} onBlur={diActiveEditMode} autoFocus = {true}  type=\"text\"  value = {status}/>\n        </div>\n    }\n        </>\n}\n\n\nexport default ProfileStatusWithHook;","import { Field, reduxForm } from \"redux-form\"\r\nimport React from 'react';\r\nimport './../login/login.css'\r\n\r\n\r\nconst ProfileForm = (props) => {\r\n    return (\r\n        \r\n        <form onSubmit={props.handleSubmit}>\r\n          <div> Обо мнe<Field component={\"input\"} type={\"text\"} name={'aboutMe'} placeholder=\"Напишите о себе\"  />\r\n          </div>\r\n           <div> lookingForAJob:<Field component={\"input\"}  type={\"checkbox\"} name={'lookingForAJob'} />\r\n            </div>\r\n           <div> lookingForAJobDescription: <Field component={\"textarea\"} type={\"text\"} name={'lookingForAJobDescription'} placeholder=\"lookingForAJobDescription\" />\r\n            </div>\r\n           <div> fullName: <Field type={\"text\"} component={\"input\"} name={'fullName'} placeholder=\"fullName\" />\r\n            </div>\r\n            {Object.keys(props.profile.contacts).map((key) => {\r\n                return <div key = {key}><span>{key}</span><Field type = {\"text\"} component={\"input\"} placeholder={key} name={\"contacts.\" + key} /></div>\r\n            })}\r\n            {props.error && <div className=\"summeryError\">{props.error}</div>}\r\n        \r\n            <button >Отрправить</button>\r\n        </form>\r\n  \r\n    )\r\n}\r\n\r\n\r\nconst ProfileReduxForm = reduxForm({ form: 'profile' })(ProfileForm)\r\nexport default ProfileReduxForm;","import './profile.css';\nimport PublishedPost from './published_post/publishedPost';\nimport userPhoto from '../../components/friends/photoFriends/userPhoto.png'\nimport Loading from '../comman/loading/loading';\nimport { maxLength, validateText } from '../utilits/validator/validator'\nimport React from 'react';\nimport { reduxForm, Field} from 'redux-form';\nimport { TextArea } from '../comman/loading/Control/formsControl';\nimport ProfileStatusWithHook from './profileStatusWithHoock';\nimport { useState } from 'react';\nimport ProfileReduxForm from './profileInfoForm';\n\n\n\nconst Profile = (props) => {\n \n  let [editMode, setEditMode] = useState(false)\n  let createPostDAte = props.postDate.map(post => (\n    <PublishedPost message={post.message} like={post.like} dislike={post.dislike} />\n  ))\n  \n \n  if (!props.profile) {\n    return <Loading />\n\n  } \n  let submitPost = (formData) => {\n    props.addPost(formData.postText)\n\n  }\n  let savePhoto = (e) => {\n   \n\n    if(e.target.files.length){\n     props.savePhoto( e.target.files[0])\n    }\n  }\n  let submitProfile2 =  (formData) => {\n    props.saveProfile(formData).then(() => {\n      setEditMode(false)\n\n    })\n\n  }\n\n    return(\n    \n\n        <div className =\"content\">\n          \n       \n           <div className = \"container_info\">\n\n        <div className=\"person\">\n            <div className=\"status\">\n              <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus}  />\n            </div>\n\n            <div className=\"person_photo\"><img alt=\"profile\" src={props.profile.photos.large || userPhoto}/></div>\n            {props.isOur &&\n              <input type = \"file\" onChange ={savePhoto}></input>\n            }\n          <div className=\"person_info\">\n              <div className=\"size_font\"></div> <div className=\"Name padding \"><span className=\"info-person\">{props.profile.fullName}</span></div><br />\n                     </div>\n        </div>\n          \n\n          <div className=\"mini_nav\">\n            <div className=\"link_info\" onClick={props.swa } id= \"link_info\">Обо мне</div>\n            <div id=\"overlay\">\n              {editMode ? <ProfileReduxForm initialValues ={props.profile} onSubmit={submitProfile2} profile={props.profile} swa2={props.swa2} isOur={props.isOur} goEditMode={() => { setEditMode(false) }} /> :\n              <ProfileInfo profile={props.profile} swa2={props.swa2} isOur={props.isOur} goEditMode ={() => {setEditMode(true)}} />\n              }\n              </div>\n            <div className=\"link_info\" onClick={props.swa3}>Контакты</div>\n            <div id = \"contact\">\n            \n                <div className = \"contactContainer\">\n                <button className=\"close\" onClick={props.swa4} >Закрыть</button>\n                {Object.keys(props.profile.contacts).map((key) => {\n                 return <Contacts key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\n               })}\n                </div>\n                \n            </div>\n            <div className=\"link_info\">Друзья</div>\n          </div>\n\n        </div>\n        <div className=\"my_posts\" >\n        < CreateFormPost onSubmit={submitPost} />\n        </div>\n            {createPostDAte}\n </div>\n    )\n  \n}\nlet maxValue10 = maxLength(10)\n\nconst CreatePost = (props) =>{\n  \n  return(\n  \n    <form className=\"form_post_send\" onSubmit={props.handleSubmit} >\n      <Field component={TextArea} name={\"postText\"} validate={[validateText, maxValue10]}/>\n      <input type=\"submit\" value=\"Отправить\"  />\n    </form>\n  )\n}\n export const Contacts = ({contactTitle, contactValue})=>{\n  return  <div>\n      <span>{contactTitle}</span>:<span>{contactValue}</span>\n    </div>\n  \n}\nconst ProfileInfo = (props ) =>{\n  return (\n    <div className=\"popup\">\n      {props.isOur && <button onClick ={props.goEditMode}>Отредактировать</button>}\n    <button className=\"close\" onClick={props.swa2} >Закрыть</button>\n                <div><span>Обо мнe </span><span>{props.profile.aboutMe}</span></div>\n\n                <div><span>lookingForAJob: </span><span>{props.profile.lookingForAJob ? \"yes\" : \"no\"}</span></div>\n                <div><span>lookingForAJobDescription: </span>{props.profile.lookingForAJobDescription || \"Не указано\"}<span></span></div>\n                <div><span>fullName: </span><span>{props.profile.fullName}</span></div>\n                <div><span>Статус: </span><span>Не указан</span></div>\n                \n                </div>\n  )\n}\nlet CreateFormPost = reduxForm({ form: 'post' })(CreatePost)\nexport default Profile;\n","import { connect } from \"react-redux\";\nimport Profile from \"./profile_component\";\nimport { addPost, setUserProfile, getProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../Redux/postReducer';\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\nimport { compose } from \"redux\";\n\n\n\nlet newPost = (state) =>{\n    return{\n        newPost:state.postPage.newPostText,\n        postDate: state.postPage.postDate,\n        profile:state.postPage.profile,\n        isAuth: state.auth.isAuth,\n        status: state.postPage.status,\n        userId: state.auth.userId,\n    }\n}\nclass ProfileAPIContainer extends React.Component{\n    refresh(){\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.userId\n        }\n        this.props.getStatus(userId)\n\n        this.props.getProfile(userId)\n    }\n    componentDidMount = () => {\n           this.refresh()\n    }\n    componentDidUpdate = (props, state) => {\n        if (this.props.match.params.userId !== props.match.params.userId ){\n            this.refresh()\n        }\n    }\n    swa() {\n        let event = document.querySelector('#overlay')\n        event.style.visibility = 'visible';\n\n        event.style.opacity = '1';\n        event.style.transition = 'all 0.7s ease-out 0s'\n    }\n    swa2() {\n        let event = document.querySelector('#overlay')\n        event.style.visibility = 'hidden';\n        event.style.opacity = '0'\n    }\n    swa3() {\n        let event = document.querySelector('#contact')\n        event.style.visibility = 'visible';\n\n        event.style.opacity = '1';\n        event.style.transition = 'all 0.7s ease-out 0s'\n    }\n    swa4() {\n        let event = document.querySelector('#contact')\n        event.style.visibility = 'hidden';\n        event.style.opacity = '0'\n    }\n\n   render(){\n    return (\n        <Profile saveProfile={this.props.saveProfile} savePhoto={this.savePhoto} isOur={!this.props.match.params.userId} {...this.props} profile={this.props.profile} swa={this.swa} swa2={this.swa2}\n            swa3={this.swa3} swa4={this.swa4} updateStatus = {this.props.updateStatus}  status ={this.props.status}/>\n\n    )\n   }\n}\nlet ComposeProfile = compose(connect(newPost, { setUserProfile, addPost, getProfile, getStatus, updateStatus, savePhoto, saveProfile }), withRouter,\n    withAuthRedirect)(ProfileAPIContainer)\n\n\nexport default ComposeProfile;"],"sourceRoot":""}