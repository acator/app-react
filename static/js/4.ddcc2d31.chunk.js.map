{"version":3,"sources":["components/HOC/withAuthRedirect.js","components/profile/published_post/publishedPost.jsx","components/profile/profileStatus/profileStatusWithHoock.jsx","components/profile/profileInfo/profileface.js","components/profile/createPost/createPost.js","components/profile/profileInfoForm.jsx","components/profile/miniNavigation/contacts/contacts.js","components/profile/miniNavigation/contacts/profileInformation/profileInformation.js","components/profile/miniNavigation/navigationPerson.js","components/profile/profile_component.jsx","components/profile/profileConteiner.jsx"],"names":["dialogsMapForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","PublishedPost","className","alt","src","message","like","dislike","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","type","ProfileFace","edit","showEdit","ourPhoto","setOurPhoto","id","profile","photos","large","userPhoto","fullName","onClick","isOur","target","files","length","savePhoto","icon","height","ReactDOM","createPortal","document","getElementById","CreatePost","newPost","setPostText","name","addPost","ProfileReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","Object","keys","contacts","map","key","error","Contacts","contactTitle","contactValue","ProfileInformation","goEditMode","goSetClose","aboutMe","lookingForAJob","lookingForAJobDescription","NavigationPerson","close","setClose","close1","setClose1","initialValues","formData","saveProfile","then","Profile","array","postDate","post","unshift","createPostDAte","post1","ProfileAPIContainer","componentDidMount","refresh","componentDidUpdate","match","params","userId","getStatus","getProfile","ComposeProfile","compose","postPage","newPostText","setUserProfile","withRouter"],"mappings":"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","file":"static/js/4.ddcc2d31.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nlet dialogsMapForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n export const withAuthRedirect  = (Component) => {\n    class RedirectComponent extends React.Component{\n        render(){\n            if (this.props.isAuth === false) return <Redirect to={\"/login\"} />\n\n            return <Component {...this.props} />\n        }\n    }\n     let HeightOrderComponent = connect(dialogsMapForRedirect)(RedirectComponent)\n\n     return HeightOrderComponent\n}\n","\nimport React from 'react';\nconst PublishedPost = (props) => {\n    return(\n        <div className=\"publ_posts\">\n        <div className=\"user_photo\"><img alt=\"users\" src=\"http://chundra.ru/uploads/posts/2009-07/sean-crane-46.jpg\"/></div>\n        <div className=\"block_post\">\n          <div className =\"user_name\">Олег Олегович</div>\n          <hr/>\n          <div className=\"user_text\">{props.message}</div>\n          <div className = \"box_like_dis\">\n        <div className=\"like\">Like {props.like}</div>\n        <div className = \"dislike\">DisLike {props.dislike}</div> \n        </div> \n        </div>\n       \n      </div>\n    )\n}\nexport default PublishedPost;","import React  from 'react'\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\n\nconst ProfileStatusWithHook  = (props) => {\n    let  [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n    useEffect(() =>{\n        setStatus(props.status)\n    }, [props.status])\n  \n    const activeEditMode = ( ) => {\n        setEditMode(true)\n    }\n    const diActiveEditMode = () =>{\n        setEditMode(false)\n        props.updateStatus(status)\n\n    }\n     const changeStatus = (e) => {\n     \n            setStatus (e.currentTarget.value)\n      \n\n    }\n\n\n      return   <>\n          {!editMode &&\n              <div><span onDoubleClick = {activeEditMode} >{props.status  !== \"\"||null ? props.status :\"Введите новый статус\"}</span></div>\n         }\n          {editMode &&\n        <div>\n              <input onChange={changeStatus} onBlur={diActiveEditMode} autoFocus = {true}  type=\"text\"  value = {status}/>\n        </div>\n    }\n        </>\n}\n\n\nexport default ProfileStatusWithHook;","import userPhoto from '../../../components/friends/photoFriends/userPhoto.png'\r\nimport ProfileStatusWithHook from '../profileStatus/profileStatusWithHoock';\r\nimport icon from \"./../iconeClose/close_icon-icons.com_48658.png\"\r\nimport { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Modal from '../../Modal/modal' \r\nconst ProfileFace = (props) =>{\r\n    let [edit, showEdit] = useState(false)\r\n    let [ourPhoto, setOurPhoto] = useState(false)\r\n    let savePhoto = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"person\">\r\n            <div id=\"userPhoto\" className=\"person_photo\" >\r\n                <img alt=\"profile\" src={props.profile.photos.large || userPhoto} />\r\n            </div>\r\n            <div className=\"person_info\">\r\n                <div className=\"size_font\"></div> <div className=\"Name padding \"><span className=\"info-person\">{props.profile.fullName}</span></div><br />\r\n            </div>\r\n            {props.status &&\r\n            <div className=\"status\">\r\n                <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n            }       \r\n            <button className=\"button_edit\" onClick={() => showEdit(true)}>Eddit Photo</button>\r\n            {edit &&\r\n\r\n                <div className='editPhotoContainer' >\r\n                    <div className=\"editPhoto\">\r\n                        <div className=\"choosePhoto\">{props.isOur &&\r\n                            <input id=\"file-upload-button\" type=\"file\" onChange={savePhoto}></input>\r\n                        }</div><button className=\"closeEdit\" onClick={() => showEdit(false)}><img alt=\"close\" src={icon} height=\"15px\" /></button>\r\n                        <div className=\"showPhoto\"><button onClick={() => setOurPhoto(true)} >Показать фото</button></div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {ourPhoto  && ReactDOM.createPortal(\r\n                <Modal>\r\n                    <div className=\"modalForPhoto\">\r\n                    <img alt=\"large\" src={props.profile.photos.large || userPhoto} />\r\n                    <button onClick={() => setOurPhoto(false)} ><img alt=\"close\" src={icon} /></button>\r\n                </div>\r\n                </Modal>,  document.getElementById(\"portal\"))\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default ProfileFace;","\r\n\r\nconst CreatePost = (props) => {\r\n    let onChange = (e) => {\r\n        props.setPostText(e.target.value)\r\n    }\r\n    let submitPost = () => {\r\n        props.addPost(props.newPost)\r\n    }\r\n    return (\r\n\r\n        <form className=\"form_post_send\" ><h2>Написать пост</h2>\r\n            <input value={props.newPost} onChange={onChange} name=\"postText\" type=\"text\" />\r\n            <input type=\"button\" value=\"Отправить\" onClick={submitPost} />\r\n        </form>\r\n    )\r\n}\r\nexport default CreatePost","import { Field, reduxForm } from \"redux-form\"\r\nimport React from 'react';\r\nimport './../login/login.css'\r\n\r\n\r\nconst ProfileForm = (props) => {\r\n   \r\n    return (\r\n        \r\n        <form onSubmit={props.handleSubmit}>\r\n          <div> Обо мнe<Field component=\"input\" type=\"text\" name='aboutMe' placeholder=\"Напишите о себе\"  />\r\n          </div>\r\n           <div> lookingForAJob:<Field component=\"input\"  type=\"checkbox\" name='lookingForAJob' />\r\n            </div>\r\n           <div> lookingForAJobDescription: <Field component=\"textarea\" type=\"text\" name='lookingForAJobDescription' placeholder=\"lookingForAJobDescription\" />\r\n            </div>\r\n           <div> fullName: <Field type=\"text\" component=\"input\" name='fullName' placeholder=\"fullName\" />\r\n            </div>\r\n            {Object.keys(props.profile.contacts).map((key) => {\r\n                return <div key = {key}><span>{key}</span><Field type = {\"text\"} component={\"input\"} placeholder={key} name={\"contacts.\" + key} /></div>\r\n            })}\r\n            {props.error && <div className=\"summeryError\">{props.error}</div>}\r\n        \r\n            <button >Отрправить</button>\r\n        </form>\r\n  \r\n    )\r\n}\r\n\r\n\r\nconst ProfileReduxForm = reduxForm({ form: 'profile' })(ProfileForm)\r\nexport default ProfileReduxForm;","\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n    return <div>\r\n        <span>{contactTitle}</span>:<span>{contactValue}</span>\r\n    </div>\r\n\r\n}\r\nexport default Contacts","const ProfileInformation = (props) => {\r\n    return (\r\n\r\n        <div className=\"popup\">\r\n            {props.isOur && <button onClick={props.goEditMode}>Отредактировать</button>}\r\n            <button className=\"close\" onClick={props.goSetClose} ></button>\r\n\r\n            <div><span>Обо мнe: </span><span>{props.profile.aboutMe}</span></div>\r\n\r\n            <div><span>lookingForAJob: </span><span>{props.profile.lookingForAJob ? \"yes\" : \"no\"}</span></div>\r\n            <div><span>lookingForAJobDescription: </span>{props.profile.lookingForAJobDescription || \"Не указано\"}<span></span></div>\r\n            <div><span>fullName: </span><span>{props.profile.fullName}</span></div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default ProfileInformation","import { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from '../../Modal/modal';\r\nimport ProfileReduxForm from './../profileInfoForm';\r\nimport Contacts from './contacts/contacts';\r\nimport ProfileInformation from './contacts/profileInformation/profileInformation';\r\n\r\n\r\nconst NavigationPerson = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [close, setClose] = useState(false)\r\n    let [close1, setClose1] = useState(false)\r\n\r\n    let submitProfile2 = (formData) => {\r\n    \r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n\r\n        })\r\n\r\n    }\r\n    return (\r\n        <div className=\"mini_nav\">\r\n            <div className=\"link_info\" onClick={() => { setClose(true) }} id=\"link_info\">Обо мне </div>\r\n            {close &&\r\n\r\n                <div id=\"overlay\">\r\n                {editMode ? ReactDOM.createPortal(<Modal><ProfileReduxForm initialValues={props.profile} onSubmit={submitProfile2} profile={props.profile} isOur={props.isOur} goEditMode={() => { setEditMode(false) }} /></Modal>, document.getElementById(\"portal\"))  :\r\n                    ReactDOM.createPortal(<Modal><ProfileInformation profile={props.profile} isOur={props.isOur} goEditMode={() => { setEditMode(true) }} goSetClose={() => { setClose(false) }} /></Modal>, document.getElementById(\"portal\"))\r\n                    }\r\n                </div>\r\n            }\r\n\r\n            <div className=\"link_info\" onClick={() => { setClose1(true) }}>Контакты</div>\r\n            {close1 && ReactDOM.createPortal(<Modal>\r\n                <div id=\"contact\">\r\n                    <div className=\"contactContainer\">\r\n                        <button className=\"close\" onClick={() => { setClose1(false) }} >Закрыть</button>\r\n                        {Object.keys(props.profile.contacts).map((key) => {\r\n                            return <Contacts key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                        })}\r\n                    </div>\r\n                </div></Modal>, document.getElementById(\"portal\"))\r\n                }\r\n            <div className=\"link_info\">Друзья</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NavigationPerson ","import './profile.css';\nimport PublishedPost from './published_post/publishedPost';\nimport Loading from '../comman/loading/loading';\nimport React from 'react';\nimport ProfileFace from './profileInfo/profileface';\nimport CreatePost from './createPost/createPost';\nimport NavigationPerson from './miniNavigation/navigationPerson';\n\n\n\nconst Profile = (props) => {\n  \n  let array = []\n  props.postDate.map(post => array.unshift(post))\n  let createPostDAte = array.map(post1 => (\n    <PublishedPost key = {post1.id}  message={post1.message} like={post1.like} dislike={post1.dislike} />\n  ))\n  \n  if (!props.profile) {\n    return <Loading />\n\n  } \n    return(\n        <div className =\"content\">\n           <div className = \"container_info\">\n      <ProfileFace {...props}/>\n\n          <NavigationPerson {...props} />\n        </div>\n        <div className=\"my_posts\" >\n          < CreatePost addPost={props.addPost} setPostText={props.setPostText} newPost={props.newPost} />\n        </div>\n       \n            {createPostDAte}\n      \n        </div>\n    )\n  \n}\n\n\n\n\nexport default Profile;\n","import { connect } from \"react-redux\";\nimport Profile from \"./profile_component\";\nimport { addPost, setUserProfile, getProfile, getStatus, updateStatus, savePhoto, saveProfile, setPostText} from '../../Redux/postReducer';\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\nimport { compose } from \"redux\";\n\n\n\nlet newPost = (state) =>{\n    return{\n        newPost:state.postPage.newPostText,\n        postDate: state.postPage.postDate,\n        profile:state.postPage.profile,\n        isAuth: state.auth.isAuth,\n        status: state.postPage.status,\n        userId: state.auth.userId,\n    }\n}\nclass ProfileAPIContainer extends React.Component{\n    refresh(){\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.userId\n        }\n        this.props.getStatus(userId)\n\n        this.props.getProfile(userId)\n    }\n    componentDidMount = () => {\n           this.refresh()\n    }\n    componentDidUpdate = (props) => {\n        if (this.props.match.params.userId !== props.match.params.userId ){\n            this.refresh()\n        }\n    }\n   \n\n   render(){\n    return (\n        <Profile saveProfile={this.props.saveProfile} savePhoto={this.savePhoto} setPostText={this.props.setPostText} isOur={!this.props.match.params.userId} {...this.props} profile={this.props.profile} \n            newPost={this.props.newPost} updateStatus = {this.props.updateStatus}  status ={this.props.status}/>\n\n    )\n   }\n}\nlet ComposeProfile = compose(connect(newPost, { setUserProfile, addPost, getProfile, getStatus, updateStatus, savePhoto, saveProfile, setPostText }), withRouter,\n    withAuthRedirect)(ProfileAPIContainer)\n\n\nexport default ComposeProfile;"],"sourceRoot":""}