{"version":3,"sources":["components/HOC/withAuthRedirect.js","components/dialogs/icon_friend_dialog/icon_friend_dialog.jsx","components/dialogs/messages/messages.jsx","components/dialogs/dialogs.jsx","components/dialogs/dialogsConteiner.jsx"],"names":["dialogsMapForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","IconFriend","className","alt","src","id","name","Message","message","maxValue10","maxLength","CreateFormForMessage","reduxForm","form","onSubmit","handleSubmit","type","value","Field","component","TextArea","validate","Dialogs","dialogsIconElement","dialogsIcon","map","people","names","messageElement","messageIcon","submit_text","textMessage","ComposeDialogs","compose","messagePage","newMessagePeople","dispatch","addMessageCreateAction"],"mappings":"sOAGIA,EAAwB,SAACC,GACzB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAGbE,EAAoB,SAACC,GAAe,IACxCC,EADuC,4JAEzC,WACI,OAA0B,IAAtBC,KAAKC,MAAMN,OAAyB,cAAC,IAAD,CAAUO,GAAI,WAE/C,cAACJ,EAAD,eAAeE,KAAKC,YALU,GACbE,IAAML,WASrC,OAF2BM,YAAQX,EAARW,CAA+BL,K,yFCJhDM,EATI,SAACJ,GAChB,OACI,sBAAKK,UAAW,SAAhB,UACA,qBAAKA,UAAW,eAAhB,SAA+B,qBAAKC,IAAM,MAAKC,IAAM,wEACrD,qBAAKF,UAAY,cAAjB,SAAgC,cAAC,IAAD,CAAUJ,GAAM,YAAcD,EAAMQ,GAApC,SAAyCR,EAAMS,aCKxEC,EAVC,SAACV,GAEb,OACI,sBAAKK,UAAY,cAAjB,UACoB,qBAAKA,UAAW,eAAhB,SAA+B,qBAAKC,IAAM,SAASC,IAAK,gEACxD,qBAAKF,UAAY,UAAjB,SAA4BL,EAAMS,OAClC,qBAAKJ,UAAY,SAAjB,SAA2BL,EAAMW,c,2CCkCzDC,G,KAAaC,YAAU,KASvBC,EAAuBC,YAAU,CAAEC,KAAM,WAAlBD,EARP,SAACf,GACjB,OACI,uBAAMK,UAAU,cAAcY,SAAUjB,EAAMkB,aAA9C,UACI,uBAAOC,KAAK,SAASC,MAAM,QAC3B,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUd,KAAK,cAAce,SAAU,CAAEZ,WAMxDa,EA5CC,SAACzB,GAEb,IAAI0B,EAAqB1B,EAAM2B,YAAYC,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAYrB,GAAIqB,EAAOrB,GAAIC,KAAMoB,EAAOC,WAC7FC,EAAiB/B,EAAMgC,YAAYJ,KAAI,SAAAjB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,QAASH,GAAIG,EAAQH,GAAIC,KAAME,EAAQmB,WAMvH,OACG,sBAAKzB,UAAY,cAAjB,oBAEI,sBAAKA,UAAY,kBAAjB,UACK,qBAAKA,UAAY,uBAAjB,SAEaqB,IAGb,qBAAKrB,UAAW,uBAAhB,SAEK0B,OAOT,cAAEjB,EAAF,CAAwBG,SArBZ,SAACN,GACjBX,EAAMiC,YAAYtB,EAAQuB,oB,0BCS9BC,EAAiBC,YAAQjC,aAjBZ,SAACV,GACd,MAAO,CAEHkC,YAAalC,EAAM4C,YAAYV,YAC/BW,iBAAkB7C,EAAM4C,YAAYC,iBACpCN,YAAavC,EAAM4C,YAAYL,YAC/BtC,OAAQD,EAAME,KAAKD,WAGL,SAAC6C,GACnB,MAAO,CAEHN,YAAa,SAACtB,GACV4B,EAASC,YAAuB7B,SAIuBf,IAA9CwC,CAAgEX,GAGtEU","file":"static/js/3.edc0ba1d.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nlet dialogsMapForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n export const withAuthRedirect  = (Component) => {\n    class RedirectComponent extends React.Component{\n        render(){\n            if (this.props.isAuth === false) return <Redirect to={\"/login\"} />\n\n            return <Component {...this.props} />\n        }\n    }\n     let HeightOrderComponent = connect(dialogsMapForRedirect)(RedirectComponent)\n\n     return HeightOrderComponent\n}\n","import { NavLink } from \"react-router-dom\"\n/*import React, { Component } from 'react';*/\n\nconst IconFriend = (props) => {\n    return(\n        <div className =\"friend\">\n        <div className =\"friend_photo\"><img alt = \"alt\"src = \"https://pixelbox.ru/wp-content/uploads/2020/12/ava-vk-cats-24.jpg\"/></div>\n        <div className = \"friend_name\" ><NavLink  to = {\"/dialogs/\" + props.id}>{props.name}</NavLink></div>\n    </div>\n    )\n}\n\nexport default IconFriend;","\n/*import React, { Component } from 'react';*/\nconst Message = (props) => {\n   \n    return (\n        <div className = \"our_message\">\n                            <div className =\"message_icon\"><img alt = \"person\" src =\"http://chundra.ru/uploads/posts/2009-07/sean-crane-46.jpg\"/></div>\n                            <div className = \"pronoun\">{props.name}</div>\n                            <div className = \"answer\">{props.message}</div>\n            </div>\n    )\n}\nexport default Message;","import IconFriend from './icon_friend_dialog/icon_friend_dialog';\nimport Message from './messages/messages';\nimport './dialogs.css';\nimport { reduxForm , Field} from 'redux-form';\nimport { maxLength } from '../utilits/validator/validator';\nimport { TextArea } from '../comman/loading/Control/formsControl';\nimport React from 'react';\n\n\nconst Dialogs = (props) => {\n    \n    let dialogsIconElement = props.dialogsIcon.map(people => <IconFriend id={people.id} name={people.names} />)\n    let messageElement = props.messageIcon.map(message => <Message message={message.message} id={message.id} name={message.names} />)\n  \n  \n    let createMessage = (message) =>{\n        props.submit_text(message.textMessage);\n    }\n    return (\n       <div className = \"all_dialogs\">\n           Dialogs\n           <div className = \"content_dialogs\">\n                <div className = \"list_dialogs_friends\">\n                   \n                           { dialogsIconElement}\n                         \n                </div>\n                <div className =\"dialogs_withSomebody\" >\n                   \n                    {messageElement }\n                      \n                        \n                </div>\n               \n           </div>\n           \n            < CreateFormForMessage  onSubmit = {createMessage}/>\n\n\n       </div>\n    );\n}\nlet maxValue10 = maxLength(10)\nlet createMessage = (props) => {\n    return (\n        <form className=\"submit_text\" onSubmit={props.handleSubmit} >\n            <input type=\"submit\" value=\" > \"  />\n            <Field component={TextArea} name=\"textMessage\" validate={[ maxValue10]} />\n        </form>\n    )\n}\nlet CreateFormForMessage = reduxForm({ form: 'message' })(createMessage)\n\nexport default Dialogs;","import { connect } from \"react-redux\";\nimport Dialogs from \"./dialogs\";\nimport { addMessageCreateAction} from '../../Redux/messageReduce';\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\nimport { compose } from \"redux\";\n\n\n\nlet dialogsMap = (state) =>{\n    return {\n        \n        dialogsIcon: state.messagePage.dialogsIcon,\n        newMessagePeople: state.messagePage.newMessagePeople,\n        messageIcon: state.messagePage.messageIcon,\n        isAuth: state.auth.isAuth\n    }\n}\nlet collBackToProps = (dispatch) => {\n    return {\n       \n        submit_text: (message) => {\n            dispatch(addMessageCreateAction(message));\n        }\n    }\n}\nlet ComposeDialogs = compose(connect(dialogsMap, collBackToProps), withAuthRedirect)(Dialogs)\n\n\nexport default ComposeDialogs;"],"sourceRoot":""}